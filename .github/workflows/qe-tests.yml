name: QE Tests

on: [push, pull_request]

jobs:
    # "Build" job
    # build:
    #   # This job tries to build PKI from src on a fresh docker container.
    #   # The docker container is spawned by github itself and we merely just
    #   # run the build commands. We then upload the artifact for consumption
    #   # by the test jobs + for the public to consume. This job **does not**
    #   # upload any build logs as they are visible in the log console itself.

    #   name: Build PKI
    #   runs-on: ubuntu-latest
    #   container: fedora:${{ matrix.os }}
    #   strategy:
    #       matrix:
    #         os: ['31', '32']
    #   steps:
    #       - name: Update base image
    #         run: |
    #               set -x &&
    #               dnf update -y &&
    #               dnf install -y dnf-plugins-core rpm-build git

    #       - name: Clone the repository
    #         uses: actions/checkout@v2

    #       - name: Install PKI build deps
    #         run: |
    #               dnf copr enable -y @pki/master
    #               dnf builddep -y --allowerasing --spec ./pki.spec

    #       - name: Build PKI packages
    #         run: ./build.sh --with-timestamp --with-commit-id --work-dir=../packages rpm

    #       - name: Compress RPMS
    #         run: tar -czf pki-rpms.tar.gz ../packages/RPMS/*

    #       # upload-artifact runs on host-vm rather than inside the container. Fixed in v2 (unreleased)
    #       # Bug: https://github.com/actions/upload-artifact/issues/13#issuecomment-532936650
    #       - name: Upload RPM artifacts
    #         uses: actions/upload-artifact@v1
    #         with:
    #           name: pki-build-${{ matrix.os }}
    #           path: pki-rpms.tar.gz

    # Tier 0
    installation-sanity:
      # This job depends on the 'build' job and waits till it completes.
      # This job needs container to be started manually, as Github provided
      # container **does not** use /usr/bin/init as its ENTRYPOINT.
      name: installation-sanity
      # needs: build
      runs-on: ubuntu-latest
      env:
        CONTAINER: pkitest
        BUILDDIR: /tmp/workdir
        PKIDIR: /tmp/workdir/pki
        LOGS: ${GITHUB_WORKSPACE}/logs.txt
        COPR_REPO: "@pki/master"
        HOSTFILE: /tmp/hostfile
        CONTAINER_PASSWORD: docker
      strategy:
        matrix:
          os: ['31', '32']
      steps:

        - name: Clone the repository
          uses: actions/checkout@v2

        ## Prepare the host system to run ansible playbooks
        - name: Install QE test dependencies
          run: sudo pip install -r ${GITHUB_WORKSPACE}/tests/dogtag/pytest-ansible/requirements.txt

        ## Prepare the System Under Test (SUT)
        - name: Build pki-test container image with systemd
          run: docker build ci/ -t pki-fedora-${{ matrix.os }} --build-arg OS_VERSION=${{ matrix.os }}

        - name: Setup required test environment
          run: IMAGE=pki-fedora-${{ matrix.os }} ci/runner-init.sh

        - name: Export the IP address of the container
          run: |
                export docker_ip=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER}`
                cat > ${HOSTFILE} <<EOF
                [all:vars]
                ansible_connection=ssh
                ansible_user=root
                ansible_ssh_pass=${CONTAINER_PASSWORD}
                [master]
                ${docker_ip} hostname=${docker_ip}
                EOF

        ### Debug
        - name: Check if hostfile contains correct values
          run: cat ${HOSTFILE}

        # - name: Download PKI binaries from Build job
        #   uses: actions/download-artifact@v1
        #   with:
        #     name: pki-build-${{ matrix.os }}

        # - name: Extract tar.gz for rpms
        #   run: tar -xzf pki-build-${{ matrix.os }}/pki-rpms.tar.gz

        # Probably optional. Remove it if ansible playbooks install these packages
        - name: Install required packages
          run: docker exec -i ${CONTAINER} dnf install -y findutils dnf-plugins-core wget 389-ds-base

        - name: Enable PKI COPR repo
          run: docker exec -i ${CONTAINER} dnf copr enable -y ${COPR_REPO}

        - name: Install PKI packages
          run: docker exec -i ${CONTAINER} bash -c "find ${PKIDIR} -name '*.rpm' -and -not -name '*debuginfo*' | xargs dnf -y install"

        ## Trigger the test from the host system using ansible playbook

        - name: Run PKI Installation sanity Test
          run: |
                export ANSIBLE_HOST_KEY_CHECKING=False
                ansible-playbook --become -i ${HOSTFILE} ${GITHUB_WORKSPACE}/tests/dogtag/pytest-ansible/installation/main.yml -e 'ansible_python_interpreter="/usr/bin/python3"' --extra-vars "topology=topology-02" -v
          
        - name: Setup tmate session
          if: always()
          uses: mxschmitt/action-tmate@v2